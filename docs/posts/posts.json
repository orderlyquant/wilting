[
  {
    "path": "posts/2021-01-28-harvesting-s5-500-sectors/",
    "title": "Ha`rvest`ing S&P 500 Sectors",
    "description": "Using open source data to look at within industry correlations.",
    "author": [
      {
        "name": "Brandon Farr",
        "url": {}
      }
    ],
    "date": "2021-01-28",
    "categories": [
      "tidyquant",
      "rvest",
      "janitor",
      "finance"
    ],
    "contents": "\n\n\nlibrary(tidyverse)  # for tidy/dplyr work\nlibrary(rvest)      # for web-scraping\n\n\n\nA little work with the rvest package. Try to get the current S&P 500 constituents from Wikipedia.\n\n\nwiki_sp500 <- read_html(\n  \"https://en.wikipedia.org/wiki/List_of_S%26P_500_companies\"\n)\n\n\n\nAccording to my SelectorGadget work, the element I am looking for is “#constituents”\n\n\nwiki_sp500 %>%\n  html_element(\"#constituents\")\n\n\n{html_node}\n<table class=\"wikitable sortable\" id=\"constituents\">\n[1] <tbody>\\n<tr>\\n<th>\\n<a href=\"/wiki/Ticker_symbol\" title=\"Ticke ...\n\nSince this is a table, it needs to be passed through the html_table function.\n\n\nsp500_tbl <- wiki_sp500 %>%\n  html_element(\"#constituents\") %>%\n  html_table() %>%\n  janitor::clean_names()\n\nsp500_tbl\n\n\n# A tibble: 505 x 9\n   symbol security sec_filings gics_sector gics_sub_indust…\n   <chr>  <chr>    <chr>       <chr>       <chr>           \n 1 MMM    3M Comp… reports     Industrials Industrial Cong…\n 2 ABT    Abbott … reports     Health Care Health Care Equ…\n 3 ABBV   AbbVie … reports     Health Care Pharmaceuticals \n 4 ABMD   ABIOMED… reports     Health Care Health Care Equ…\n 5 ACN    Accentu… reports     Informatio… IT Consulting &…\n 6 ATVI   Activis… reports     Communicat… Interactive Hom…\n 7 ADBE   Adobe I… reports     Informatio… Application Sof…\n 8 AMD    Advance… reports     Informatio… Semiconductors  \n 9 AAP    Advance… reports     Consumer D… Automotive Reta…\n10 AES    AES Corp reports     Utilities   Independent Pow…\n# … with 495 more rows, and 4 more variables:\n#   headquarters_location <chr>, date_first_added <chr>, cik <int>,\n#   founded <chr>\n\nWow! Sure enough, we get a tibble with what we want. Notice the use of janitor to clean up the column names for convenience. I think I should always do this.\nLet’s look at all of the stocks in the same gics_sub_industry as Apple.\n\n\naapl_sub_ind <- sp500_tbl %>%\n  filter(symbol == \"AAPL\") %>%\n  pull(gics_sub_industry)\n\naapl_peers_tbl <- sp500_tbl %>%\n  filter(gics_sub_industry == aapl_sub_ind) %>%\n  select(symbol, security, matches(\"^gics\"))\n\naapl_peers_tbl\n\n\n# A tibble: 7 x 4\n  symbol security         gics_sector      gics_sub_industry          \n  <chr>  <chr>            <chr>            <chr>                      \n1 AAPL   Apple Inc.       Information Tec… Technology Hardware, Stora…\n2 HPE    Hewlett Packard… Information Tec… Technology Hardware, Stora…\n3 HPQ    HP Inc.          Information Tec… Technology Hardware, Stora…\n4 NTAP   NetApp           Information Tec… Technology Hardware, Stora…\n5 STX    Seagate Technol… Information Tec… Technology Hardware, Stora…\n6 WDC    Western Digital  Information Tec… Technology Hardware, Stora…\n7 XRX    Xerox            Information Tec… Technology Hardware, Stora…\n\nThis is a great list to pass to tidyquant and try pulling some pricing data.\n\n\nlibrary(tidyquant)\n\naapl_peers_pricing <- aapl_peers_tbl %>%\n  pull(symbol) %>%\n  tq_get(get = \"tiingo\")\n\n\n\nBy default, we get about a years worth of prices. Let’s calculate returns:\n\n\naapl_peers_returns <- aapl_peers_pricing %>%\n  group_by(symbol) %>%\n  tq_transmute(adjusted, periodReturn, period = \"daily\", col_rename = \"return\")\n\n\n\nNow, calculate the correlation matrix:\n\n\naapl_peers_returns %>%\n  \n  # put returns into columns\n  pivot_wider(names_from = symbol, values_from = return) %>%\n  \n  # first day return is 0, so remove row\n  slice(-1) %>%\n  \n  # remove date column, so you can call `cor` on entire tibble\n  select(-date) %>%\n  \n  # calculate correlations\n  cor() %>%\n  \n  # `cor` returns a matrix, convert back into tibble\n  as_tibble(rownames = \"symbol_1\") %>%\n  \n  # transform into tidy format for easier processing\n  pivot_longer(-1, names_to = \"symbol_2\", values_to = \"cor\") %>%\n  \n  # remove the correlations of a stock with itself\n  filter(!(symbol_1 == symbol_2)) %>%\n  \n  # group by symbol_1 and arrange descending by correlation\n  group_by(symbol_1) %>%\n  arrange(desc(cor)) %>%\n  \n  # look at first row in each group == highest correlated stock\n  slice(1)\n\n\n# A tibble: 7 x 3\n# Groups:   symbol_1 [7]\n  symbol_1 symbol_2   cor\n  <chr>    <chr>    <dbl>\n1 AAPL     STX      0.550\n2 HPE      NTAP     0.713\n3 HPQ      XRX      0.781\n4 NTAP     HPE      0.713\n5 STX      WDC      0.711\n6 WDC      STX      0.711\n7 XRX      HPQ      0.781\n\n\n\n\n",
    "preview": {},
    "last_modified": "2021-01-28T18:38:57-05:00",
    "input_file": "harvesting-sp-500-sectors.utf8.md"
  },
  {
    "path": "posts/2021-01-26-distill-and-timetk/",
    "title": "distill and timetk",
    "description": "today's directed wanderings",
    "author": [
      {
        "name": "Brandon Farr",
        "url": {}
      }
    ],
    "date": "2021-01-26",
    "categories": [
      "timetk",
      "distill"
    ],
    "contents": "\nToday, I worked on the following:\nsetting up this blog\nrunning through the weekly Free R Tip from business-science\nread through GIT SQL Together\nDistill blog\nSet up this blog using the distill package and github pages. A few takeaways:\nsee here for details on getting your repo right\nsee About for other details\nFree R Tip\nThis week’s tip was about many ways to create data frames/tibbles. I was familiar with these, but found the use of timetk::tk_make_timeseries informative.\n\n\ntibble::tibble(\n    date          = timetk::tk_make_timeseries(\"2010\", length_out = 12, by = \"quarter\"),\n    interest_rate = (seq(12, 3, length.out = 12) * (sin(1:12) + 2)) / 12\n)\n\n\n# A tibble: 12 x 2\n   date       interest_rate\n   <date>             <dbl>\n 1 2010-01-01         2.84 \n 2 2010-04-01         2.71 \n 3 2010-07-01         1.85 \n 4 2010-10-01         0.989\n 5 2011-01-01         0.757\n 6 2011-04-01         1.13 \n 7 2011-07-01         1.57 \n 8 2011-10-01         1.56 \n 9 2012-01-01         1.10 \n10 2012-04-01         0.563\n11 2012-07-01         0.318\n12 2012-10-01         0.366\n\nNote that the by argument is very flexible:\nby - a character string, containing one of “sec”, “min”, “hour”, “day”, “week”, “month”, “quarter” or “year”. You can create regularly spaced sequences using phrases like by = “10 min”\nGIT + SQL\nYou will always need that query again, so “GIT” it\nQueries change through time, you may need a previous version when you realize the improved query “broke” something in a way that wasn’t immediately obvious\nsave with a .sql extension\n\nLooks like there are other interesting posts from this site. I added one to Notion, so it may be covered here someday.\n\n\n\n",
    "preview": {},
    "last_modified": "2021-01-26T16:28:25-05:00",
    "input_file": "distill-and-timetk.utf8.md"
  }
]
